# -*- coding: mbcs -*-

from ctypes import *
from comtypes.automation import DISPPARAMS, EXCEPINFO, IDispatch, IEnumVARIANT
from comtypes import (
    _check_version, BSTR, CoClass, COMMETHOD, dispid, DISPMETHOD,
    DISPPROPERTY, GUID, IUnknown
)
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Any, Tuple
    from comtypes import hints


_lcid = 0  # change this if required
typelib_path = 'C:\\Windows\\System32\\stdole2.tlb'
OLE_YPOS_CONTAINER = c_float
FONTSIZE = c_longlong
OLE_YPOS_HIMETRIC = c_int
OLE_HANDLE = c_int
OLE_XSIZE_HIMETRIC = c_int
OLE_YPOS_PIXELS = c_int
FONTBOLD = VARIANT_BOOL
OLE_YSIZE_PIXELS = c_int
OLE_XPOS_HIMETRIC = c_int
FONTUNDERSCORE = VARIANT_BOOL
OLE_YSIZE_HIMETRIC = c_int
OLE_XPOS_PIXELS = c_int
OLE_COLOR = c_ulong
FONTNAME = BSTR
OLE_ENABLEDEFAULTBOOL = VARIANT_BOOL
OLE_XSIZE_CONTAINER = c_float
OLE_XSIZE_PIXELS = c_int
OLE_CANCELBOOL = VARIANT_BOOL
FONTITALIC = VARIANT_BOOL
FONTSTRIKETHROUGH = VARIANT_BOOL
OLE_XPOS_CONTAINER = c_float
OLE_OPTEXCLUSIVE = VARIANT_BOOL
OLE_YSIZE_CONTAINER = c_float



class IFont(IUnknown):
    """Font Object"""
    _case_insensitive_ = True
    _iid_ = GUID('{BEF6E002-A874-101A-8BBA-00AA00300CAB}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> Any: ...
        def _set_Name(self, pname: Any) -> Any: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Size(self) -> Any: ...
        def _set_Size(self, psize: Any) -> Any: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_Bold(self) -> Any: ...
        def _set_Bold(self, pbold: Any) -> Any: ...
        Bold = hints.normal_property(_get_Bold, _set_Bold)
        def _get_Italic(self) -> Any: ...
        def _set_Italic(self, pitalic: Any) -> Any: ...
        Italic = hints.normal_property(_get_Italic, _set_Italic)
        def _get_Underline(self) -> Any: ...
        def _set_Underline(self, punderline: Any) -> Any: ...
        Underline = hints.normal_property(_get_Underline, _set_Underline)
        def _get_Strikethrough(self) -> Any: ...
        def _set_Strikethrough(self, pstrikethrough: Any) -> Any: ...
        Strikethrough = hints.normal_property(_get_Strikethrough, _set_Strikethrough)
        def _get_Weight(self) -> Any: ...
        def _set_Weight(self, pweight: Any) -> Any: ...
        Weight = hints.normal_property(_get_Weight, _set_Weight)
        def _get_Charset(self) -> Any: ...
        def _set_Charset(self, pcharset: Any) -> Any: ...
        Charset = hints.normal_property(_get_Charset, _set_Charset)
        def _get_hFont(self) -> Any: ...
        hFont = hints.normal_property(_get_hFont)
        def Clone(self) -> Any: ...
        def IsEqual(self, pfontOther: Any) -> Any: ...
        def SetRatio(self, cyLogical: Any, cyHimetric: Any) -> Any: ...
        def AddRefHfont(self, hFont: Any) -> Any: ...
        def ReleaseHfont(self, hFont: Any) -> Any: ...


IFont._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pname')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pname')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_longlong), 'psize')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Size',
        (['in'], c_longlong, 'psize')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Bold',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pbold')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Bold',
        (['in'], VARIANT_BOOL, 'pbold')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Italic',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pitalic')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Italic',
        (['in'], VARIANT_BOOL, 'pitalic')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Underline',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'punderline')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Underline',
        (['in'], VARIANT_BOOL, 'punderline')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Strikethrough',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pstrikethrough')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Strikethrough',
        (['in'], VARIANT_BOOL, 'pstrikethrough')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Weight',
        (['out', 'retval'], POINTER(c_short), 'pweight')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Weight',
        (['in'], c_short, 'pweight')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Charset',
        (['out', 'retval'], POINTER(c_short), 'pcharset')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Charset',
        (['in'], c_short, 'pcharset')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'hFont',
        (['out', 'retval'], POINTER(OLE_HANDLE), 'phfont')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Clone',
        (['out'], POINTER(POINTER(IFont)), 'ppfont')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'IsEqual',
        (['in'], POINTER(IFont), 'pfontOther')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetRatio',
        (['in'], c_int, 'cyLogical'),
        (['in'], c_int, 'cyHimetric')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'AddRefHfont',
        (['in'], OLE_HANDLE, 'hFont')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ReleaseHfont',
        (['in'], OLE_HANDLE, 'hFont')
    ),
]

################################################################
# code template for IFont implementation
# class IFont_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pname
#     def _set(self, pname):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return psize
#     def _set(self, psize):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbold
#     def _set(self, pbold):
#         '-no docstring-'
#     Bold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pitalic
#     def _set(self, pitalic):
#         '-no docstring-'
#     Italic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return punderline
#     def _set(self, punderline):
#         '-no docstring-'
#     Underline = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pstrikethrough
#     def _set(self, pstrikethrough):
#         '-no docstring-'
#     Strikethrough = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pweight
#     def _set(self, pweight):
#         '-no docstring-'
#     Weight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pcharset
#     def _set(self, pcharset):
#         '-no docstring-'
#     Charset = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def hFont(self):
#         '-no docstring-'
#         #return phfont
#
#     def Clone(self):
#         '-no docstring-'
#         #return ppfont
#
#     def IsEqual(self, pfontOther):
#         '-no docstring-'
#         #return 
#
#     def SetRatio(self, cyLogical, cyHimetric):
#         '-no docstring-'
#         #return 
#
#     def AddRefHfont(self, hFont):
#         '-no docstring-'
#         #return 
#
#     def ReleaseHfont(self, hFont):
#         '-no docstring-'
#         #return 
#
# values for enumeration 'LoadPictureConstants'
Default = 0
Monochrome = 1
VgaColor = 2
Color = 4
LoadPictureConstants = c_int  # enum


class Picture(IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7BF80981-BF32-101A-8BBB-00AA00300CAB}')
    _idlflags_ = []
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        @property  # dispprop
        def Handle(self) -> Any: ...
        @property  # dispprop
        def hPal(self) -> Any: ...
        @property  # dispprop
        def Type(self) -> Any: ...
        @property  # dispprop
        def Width(self) -> Any: ...
        @property  # dispprop
        def Height(self) -> Any: ...
        def Render(self, hdc: Any, x: Any, y: Any, cx: Any, cy: Any, xSrc: Any, ySrc: Any, cxSrc: Any, cySrc: Any, prcWBounds: Any) -> Any: ...


Picture._disp_methods_ = [
    DISPPROPERTY([dispid(0), 'readonly'], OLE_HANDLE, 'Handle'),
    DISPPROPERTY([dispid(2)], OLE_HANDLE, 'hPal'),
    DISPPROPERTY([dispid(3), 'readonly'], c_short, 'Type'),
    DISPPROPERTY([dispid(4), 'readonly'], OLE_XSIZE_HIMETRIC, 'Width'),
    DISPPROPERTY([dispid(5), 'readonly'], OLE_YSIZE_HIMETRIC, 'Height'),
    DISPMETHOD(
        [dispid(6)],
        None,
        'Render',
        ([], c_int, 'hdc'),
        ([], c_int, 'x'),
        ([], c_int, 'y'),
        ([], c_int, 'cx'),
        ([], c_int, 'cy'),
        ([], OLE_XPOS_HIMETRIC, 'xSrc'),
        ([], OLE_YPOS_HIMETRIC, 'ySrc'),
        ([], OLE_XSIZE_HIMETRIC, 'cxSrc'),
        ([], OLE_YSIZE_HIMETRIC, 'cySrc'),
        ([], c_void_p, 'prcWBounds')
    ),
]


class Library(object):
    """OLE Automation"""
    name = 'stdole'
    _reg_typelib_ = ('{00020430-0000-0000-C000-000000000046}', 2, 0)


class Font(IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BEF6E003-A874-101A-8BBA-00AA00300CAB}')
    _idlflags_ = []
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        @property  # dispprop
        def Name(self) -> Any: ...
        @property  # dispprop
        def Size(self) -> Any: ...
        @property  # dispprop
        def Bold(self) -> Any: ...
        @property  # dispprop
        def Italic(self) -> Any: ...
        @property  # dispprop
        def Underline(self) -> Any: ...
        @property  # dispprop
        def Strikethrough(self) -> Any: ...
        @property  # dispprop
        def Weight(self) -> Any: ...
        @property  # dispprop
        def Charset(self) -> Any: ...


Font._disp_methods_ = [
    DISPPROPERTY([dispid(0)], BSTR, 'Name'),
    DISPPROPERTY([dispid(2)], c_longlong, 'Size'),
    DISPPROPERTY([dispid(3)], VARIANT_BOOL, 'Bold'),
    DISPPROPERTY([dispid(4)], VARIANT_BOOL, 'Italic'),
    DISPPROPERTY([dispid(5)], VARIANT_BOOL, 'Underline'),
    DISPPROPERTY([dispid(6)], VARIANT_BOOL, 'Strikethrough'),
    DISPPROPERTY([dispid(7)], c_short, 'Weight'),
    DISPPROPERTY([dispid(8)], c_short, 'Charset'),
]
IFontDisp = Font
# values for enumeration 'OLE_TRISTATE'
Unchecked = 0
Checked = 1
Gray = 2
OLE_TRISTATE = c_int  # enum


class FontEvents(IDispatch):
    """Event interface for the Font object"""
    _case_insensitive_ = True
    _iid_ = GUID('{4EF6100A-AF88-11D0-9846-00C04FC29993}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def FontChanged(self, PropertyName: Any) -> Any: ...


FontEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(9)],
        None,
        'FontChanged',
        (['in'], BSTR, 'PropertyName')
    ),
]
IFontEventsDisp = FontEvents


class StdPicture(CoClass):
    _reg_clsid_ = GUID('{0BE35204-8F91-11CE-9DE3-00AA004BB851}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{00020430-0000-0000-C000-000000000046}', 2, 0)


class IPicture(IUnknown):
    """Picture Object"""
    _case_insensitive_ = True
    _iid_ = GUID('{7BF80980-BF32-101A-8BBB-00AA00300CAB}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Handle(self) -> Any: ...
        Handle = hints.normal_property(_get_Handle)
        def _get_hPal(self) -> Any: ...
        def _set_hPal(self, phpal: Any) -> Any: ...
        hPal = hints.normal_property(_get_hPal, _set_hPal)
        def _get_Type(self) -> Any: ...
        Type = hints.normal_property(_get_Type)
        def _get_Width(self) -> Any: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> Any: ...
        Height = hints.normal_property(_get_Height)
        def Render(self, hdc: Any, x: Any, y: Any, cx: Any, cy: Any, xSrc: Any, ySrc: Any, cxSrc: Any, cySrc: Any, prcWBounds: Any) -> Any: ...
        def _get_CurDC(self) -> Any: ...
        CurDC = hints.normal_property(_get_CurDC)
        def SelectPicture(self, hdcIn: Any) -> Tuple[Any, Any]: ...
        def _get_KeepOriginalFormat(self) -> Any: ...
        def _set_KeepOriginalFormat(self, pfkeep: Any) -> Any: ...
        KeepOriginalFormat = hints.normal_property(_get_KeepOriginalFormat, _set_KeepOriginalFormat)
        def PictureChanged(self) -> Any: ...
        def SaveAsFile(self, pstm: Any, fSaveMemCopy: Any) -> Any: ...
        def _get_Attributes(self) -> Any: ...
        Attributes = hints.normal_property(_get_Attributes)
        def SetHdc(self, hdc: Any) -> Any: ...


StdPicture._com_interfaces_ = [Picture, IPicture]


class StdFont(CoClass):
    _reg_clsid_ = GUID('{0BE35203-8F91-11CE-9DE3-00AA004BB851}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{00020430-0000-0000-C000-000000000046}', 2, 0)


StdFont._com_interfaces_ = [Font, IFont]
StdFont._outgoing_interfaces_ = [FontEvents]
IPictureDisp = Picture

IPicture._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Handle',
        (['out', 'retval'], POINTER(OLE_HANDLE), 'phandle')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'hPal',
        (['out', 'retval'], POINTER(OLE_HANDLE), 'phpal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_short), 'ptype')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(OLE_XSIZE_HIMETRIC), 'pwidth')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(OLE_YSIZE_HIMETRIC), 'pheight')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Render',
        (['in'], c_int, 'hdc'),
        (['in'], c_int, 'x'),
        (['in'], c_int, 'y'),
        (['in'], c_int, 'cx'),
        (['in'], c_int, 'cy'),
        (['in'], OLE_XPOS_HIMETRIC, 'xSrc'),
        (['in'], OLE_YPOS_HIMETRIC, 'ySrc'),
        (['in'], OLE_XSIZE_HIMETRIC, 'cxSrc'),
        (['in'], OLE_YSIZE_HIMETRIC, 'cySrc'),
        (['in'], c_void_p, 'prcWBounds')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'hPal',
        (['in'], OLE_HANDLE, 'phpal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'CurDC',
        (['out', 'retval'], POINTER(c_int), 'phdcOut')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SelectPicture',
        (['in'], c_int, 'hdcIn'),
        (['out'], POINTER(c_int), 'phdcOut'),
        (['out'], POINTER(OLE_HANDLE), 'phbmpOut')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'KeepOriginalFormat',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfkeep')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'KeepOriginalFormat',
        (['in'], VARIANT_BOOL, 'pfkeep')
    ),
    COMMETHOD([], HRESULT, 'PictureChanged'),
    COMMETHOD(
        [],
        HRESULT,
        'SaveAsFile',
        (['in'], c_void_p, 'pstm'),
        (['in'], VARIANT_BOOL, 'fSaveMemCopy'),
        (['out'], POINTER(c_int), 'pcbSize')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Attributes',
        (['out', 'retval'], POINTER(c_int), 'pdwAttr')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetHdc',
        (['in'], OLE_HANDLE, 'hdc')
    ),
]

################################################################
# code template for IPicture implementation
# class IPicture_Impl(object):
#     @property
#     def Handle(self):
#         '-no docstring-'
#         #return phandle
#
#     def _get(self):
#         '-no docstring-'
#         #return phpal
#     def _set(self, phpal):
#         '-no docstring-'
#     hPal = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return ptype
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return pwidth
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return pheight
#
#     def Render(self, hdc, x, y, cx, cy, xSrc, ySrc, cxSrc, cySrc, prcWBounds):
#         '-no docstring-'
#         #return 
#
#     @property
#     def CurDC(self):
#         '-no docstring-'
#         #return phdcOut
#
#     def SelectPicture(self, hdcIn):
#         '-no docstring-'
#         #return phdcOut, phbmpOut
#
#     def _get(self):
#         '-no docstring-'
#         #return pfkeep
#     def _set(self, pfkeep):
#         '-no docstring-'
#     KeepOriginalFormat = property(_get, _set, doc = _set.__doc__)
#
#     def PictureChanged(self):
#         '-no docstring-'
#         #return 
#
#     def SaveAsFile(self, pstm, fSaveMemCopy):
#         '-no docstring-'
#         #return pcbSize
#
#     @property
#     def Attributes(self):
#         '-no docstring-'
#         #return pdwAttr
#
#     def SetHdc(self, hdc):
#         '-no docstring-'
#         #return 
#

__all__ = [
    'OLE_XPOS_PIXELS', 'OLE_YPOS_CONTAINER', 'OLE_YSIZE_PIXELS',
    'OLE_YPOS_HIMETRIC', 'FONTSTRIKETHROUGH', 'LoadPictureConstants',
    'OLE_XSIZE_HIMETRIC', 'VgaColor', 'Monochrome', 'FontEvents',
    'FONTUNDERSCORE', 'OLE_XSIZE_PIXELS', 'Unchecked', 'IPicture',
    'OLE_XSIZE_CONTAINER', 'Checked', 'OLE_XPOS_HIMETRIC', 'Picture',
    'OLE_YSIZE_HIMETRIC', 'Color', 'IFont', 'Gray',
    'OLE_ENABLEDEFAULTBOOL', 'FONTSIZE', 'typelib_path', 'OLE_COLOR',
    'FONTNAME', 'FONTITALIC', 'OLE_YPOS_PIXELS', 'Font',
    'IPictureDisp', 'Library', 'OLE_TRISTATE', 'FONTBOLD',
    'OLE_XPOS_CONTAINER', 'Default', 'OLE_CANCELBOOL', 'StdPicture',
    'OLE_YSIZE_CONTAINER', 'StdFont', 'OLE_HANDLE', 'IFontDisp',
    'OLE_OPTEXCLUSIVE', 'IFontEventsDisp'
]

_check_version('1.3.1', 1622894692.653069)

